// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Tcc.DayHappy.Data.Contextos;

namespace Tcc.DayHappy.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180517003801_Tabelas")]
    partial class Tabelas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Tcc.DayHappy.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Itinerarios.Itinerario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("HorarioSaida");

                    b.Property<string>("Modelocarro");

                    b.Property<string>("Numcarro");

                    b.Property<int?>("OrcamentoId");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("Itinerarios");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Orcamentos.Orcamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Contato1");

                    b.Property<string>("Contato2");

                    b.Property<DateTime>("DataEvento");

                    b.Property<DateTime>("DataValidadeOrc");

                    b.Property<string>("Email");

                    b.Property<DateTime>("HorarioInicio");

                    b.Property<DateTime>("HorarioTermino");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Numero");

                    b.Property<int?>("PessoaJuridicaId");

                    b.Property<int?>("PesssoaFisicaId");

                    b.Property<string>("Referencia");

                    b.Property<string>("StatusOrc");

                    b.Property<string>("TipoEvento");

                    b.Property<decimal>("ValorFrete");

                    b.Property<decimal>("ValorTotalProd");

                    b.Property<decimal>("ValorTotalServ");

                    b.HasKey("Id");

                    b.HasIndex("PessoaJuridicaId");

                    b.HasIndex("PesssoaFisicaId");

                    b.ToTable("Orcamentos");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Produtos.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckListPecas");

                    b.Property<DateTime>("DataCompra");

                    b.Property<string>("Descricao");

                    b.Property<string>("FaixaEtaria");

                    b.Property<string>("NomeProduto");

                    b.Property<decimal>("ValorCusto");

                    b.Property<decimal>("ValorLocacao");

                    b.HasKey("Id");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Usuario.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<int>("Contato1");

                    b.Property<int>("Contato2");

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("DataAdm");

                    b.Property<DateTime>("DataNasc");

                    b.Property<string>("Email");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeCargo");

                    b.Property<string>("Numero");

                    b.Property<string>("Referencia");

                    b.Property<string>("Rg");

                    b.Property<decimal>("Salario");

                    b.Property<string>("Sexo");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Usuario.PessoaFisica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<int>("Contato1");

                    b.Property<int>("Contato2");

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("DataNasc");

                    b.Property<string>("Email");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<string>("Numero");

                    b.Property<string>("Referencia");

                    b.Property<string>("Rg");

                    b.Property<string>("Sexo");

                    b.HasKey("Id");

                    b.ToTable("PessoasFisica");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Usuario.PessoaJuridica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Cnpj");

                    b.Property<int>("Contato1");

                    b.Property<int>("Contato2");

                    b.Property<string>("Email");

                    b.Property<string>("InscEstadual");

                    b.Property<string>("Logradouro");

                    b.Property<string>("NomeEmpresa");

                    b.Property<string>("Numero");

                    b.Property<string>("Representante");

                    b.HasKey("Id");

                    b.ToTable("PessoasJuridica");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tcc.DayHappy.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tcc.DayHappy.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcc.DayHappy.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tcc.DayHappy.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Itinerarios.Itinerario", b =>
                {
                    b.HasOne("Tcc.DayHappy.Dominio.Orcamentos.Orcamento", "Orcamento")
                        .WithMany()
                        .HasForeignKey("OrcamentoId");
                });

            modelBuilder.Entity("Tcc.DayHappy.Dominio.Orcamentos.Orcamento", b =>
                {
                    b.HasOne("Tcc.DayHappy.Dominio.Usuario.PessoaJuridica", "PessoaJuridica")
                        .WithMany()
                        .HasForeignKey("PessoaJuridicaId");

                    b.HasOne("Tcc.DayHappy.Dominio.Usuario.PessoaFisica", "PesssoaFisica")
                        .WithMany()
                        .HasForeignKey("PesssoaFisicaId");
                });
#pragma warning restore 612, 618
        }
    }
}
